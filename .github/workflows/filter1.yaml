name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Load the external filter file and pass it as a string to the next step
      - name: Load path filters
        id: load-filters
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const filters = yaml.load(fs.readFileSync('filters.yml', 'utf8'));
            return { filters: filters.filters };

      - name: Enable build based on the changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: ${{ toJson(steps.load-filters.outputs.filters) }}  # Pass the loaded filters directly as JSON

      - name: Run a one-line script RAJESH-1
        if: steps.filter.outputs.build == 'true'
        run: echo Hello, world!
        
      - name: Run a one-line script RAJESH-2
        if: steps.filter.outputs.build == 'true'
        run: echo Hello, world!

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Load the external filter file and pass it as a string to the next step
      - name: Load path filters
        id: load-filters
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const filters = yaml.load(fs.readFileSync('filters.yml', 'utf8'));
            return { filters: filters.filters };

      - name: Enable build based on the changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: ${{ toJson(steps.load-filters.outputs.filters) }}  # Pass the loaded filters directly as JSON

      - name: Run a one-line script RAJESH-3
        if: steps.filter.outputs.build == 'true'
        run: echo Hello, world!
        
      - name: Run a one-line script RAJESH-4
        if: steps.filter.outputs.build == 'true'
        run: echo Hello, world!
